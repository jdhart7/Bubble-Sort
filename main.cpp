/* This program creates an array filled with "random" (technically not random because the modulo 'favors' certain numbers and the randomly generated
number itself is generated by system time) numbers, then calls a header file that will sort those numbers using the bubble sort algorithm.
This algorithm is only called once, just to show that it works. Due to the nature of this algorithm, the programmer would have to call it
n-1 times to get the array completely sorted if it were a "worst case senerio." The algorithm is in a header file so both programs are modular and
can be used with either a different algorithm, or the algorithm can be used on a different main file. 
-John DeHart
9/1/2019
Algorithms */

#include <iostream>
#include <time.h>
#include "bubbleSort.h"		//includes the bubble sorting algorithm from header file

using namespace std;

int main() {
	
	srand (time(NULL));		//gets "random" number from the system's time
	
	int arr[14], temp = 0, i = 0, length = 12;	//array for sorting, a temp value for the random number genorator, i for counting, length of array
	
	for (i = 0; i <= 13; i++) {
		temp = rand()%100;		//for loop takes a random number from the system, takes the remainder of that number
		arr[i] = temp;			//then fills the array with these numbers.
	}
	
	for (i = 0; i <=13; i++) {
		cout << arr[i];			//This prints the array so the user can see it before it's sorted.
		if (i <= 12) {
			cout << ", ";
		}
	}
	
	bubbleSort (arr, length);		//calling the bubble sort algorithm from the header file
	
	cout << "\n\n" << "sorted array: " << endl;
	
	for (i = 0; i <= 13; i++) {
		cout << arr[i];
		if (i <= 12) {			//prints the array again, now that it's sorted.
			cout << ", ";
		}
	}
	
	return 0;
	
}

